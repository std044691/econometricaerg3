/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import handlers.Quandle;
import econometrica.*;
import handlers.Database;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Country;
import model.CountryData;
import model.CountryDataset;
import org.jfree.ui.RefineryUtilities;


/**
 * Η κεντρική φόρμα που ανοίγει το πρόγραμμα.
 * Είναι η κύρια κλάση που χρησιμοποιεί η εφαρμογή για να ανοίξει το πρόγραμμα.
 * 
 * @author themhz
 * @version 1.0
 */
public class mainpage extends javax.swing.JFrame {

    /**
     * Creates new form mainpage
     */        
    
    //Κρατάει το πλήθος των χορών από το csv αρχείο που φορτώνει στο dropdown list hm = hasmap
    private HashMap<String, String> hmCountries;
    //Κρατάει 2 στοιχεία. Ένα για το oil ένα για το Gdp της κάθε χώρας 
    private ArrayList<CountryDataset> countryDatasetList;
    //Κρατάει τα δεδομένα που έρχονται από την Quandle για την χρήση λαδιού
    private Oil oil;
    //Κρατάει τα δεδομένα που έρχονται από την Quandle για την χρήση του ΑΕΠ
    private Gdp gdp;    
    
    private String countryCode;
    public mainpage() {   
        
        System.out.println("starting econometrica please wait...");
        //Αρχικοποίηση μεταβλητών
        hmCountries = new HashMap<String, String>();
        countryDatasetList = new ArrayList<CountryDataset>();
        oil = null;
        gdp = null;                            
        
        initComponents();
        
        //Βάζω το παράθυρο στο κέντρο
        setLocationRelativeTo(null);
        
        //Ρυθμίζει τον έλεγχο των κουμπιών
        buttonController(false, false, false, false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbCountries = new javax.swing.JComboBox<>();
        btnApiCall = new javax.swing.JButton();
        lblselectedCountry = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblGDP = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblGdp = new javax.swing.JLabel();
        lblGdpStartDate = new javax.swing.JLabel();
        lblGdpEndDate = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOil = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblOil = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblOilStartDate = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblOilEndDate = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnAlreadySaved = new javax.swing.JCheckBox();
        btnPlot = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lblAction = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Econometrica");
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Select a country:");

        cbCountries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCountriesActionPerformed(evt);
            }
        });

        btnApiCall.setBackground(new java.awt.Color(255, 255, 255));
        btnApiCall.setText("Fetch Data");
        btnApiCall.setToolTipText("");
        btnApiCall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApiCallActionPerformed(evt);
            }
        });

        lblselectedCountry.setText("-");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblselectedCountry, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(cbCountries, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(459, 459, 459)
                .add(btnApiCall, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(lblselectedCountry))
                .add(13, 13, 13)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbCountries, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnApiCall, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setAlignmentX(0.0F);
        jPanel2.setAlignmentY(0.0F);

        tblGDP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Year", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblGDP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblGDP.setPreferredSize(null);
        jScrollPane3.setViewportView(tblGDP);

        jLabel11.setText("End Date:");

        jLabel10.setText("Start Date:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Dataset Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("GDP Data");

        lblGdp.setText("-");

        lblGdpStartDate.setText("-");

        lblGdpEndDate.setText("-");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lblGdp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(lblGdpStartDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(lblGdpEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(48, 48, 48))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblGdp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblGdpStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel11))
                    .add(lblGdpEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .add(31, 31, 31))
        );

        lblGdpStartDate.getAccessibleContext().setAccessibleName("");

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setAlignmentX(0.0F);
        jPanel4.setAlignmentY(0.0F);

        tblOil.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Year", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOil.setPreferredSize(null);
        jScrollPane2.setViewportView(tblOil);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Oil Data");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Dataset Name:");

        lblOil.setText("-");

        jLabel6.setText("Start Date:");

        lblOilStartDate.setText("-");

        jLabel7.setText("End Date:");

        lblOilEndDate.setText("-");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblOilStartDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(lblOilEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(lblOil, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                                .add(31, 31, 31))))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblOil, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblOilStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblOilEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .add(30, 30, 30))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        btnAlreadySaved.setBackground(new java.awt.Color(255, 255, 255));
        btnAlreadySaved.setText("Already Saved");
        btnAlreadySaved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlreadySavedActionPerformed(evt);
            }
        });

        btnPlot.setBackground(new java.awt.Color(255, 255, 255));
        btnPlot.setText("Plot");
        btnPlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlotActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.setToolTipText("");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblAction.setText("-");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(lblAction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 333, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(btnSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnPlot, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnAlreadySaved, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnPlot, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnAlreadySaved, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(lblAction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(21, 21, 21))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(1, 1, 1)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(953, 701));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Είναι η μέθοδος που καλείται όταν όταν πατηθεί το κουμπί fetch
     * Θα χρησιμοποιήσει την κλάση Quandle για να καλέσει το api της quandle προκειμένου να φέρει
     * το json από το api και να το επεξργαστεί και να το εμφανίσει στην οθόνη του χρήστη, δηλαδή τα 2 tables
     * 
     * @param evt Το event του κουμπιού
     * 
     */
    private void btnApiCallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApiCallActionPerformed
        
        //Εμφανίζω την λεκτική περιγραφή της ενέργειας, οτι δηλαδή κάνω fetch τα data από την quandle
        lblAction.setText("Fetching data from Quandle...");
        System.out.println("Fetching data from Quandle...");
        
        //Καθαρίζω την μεταβλιτή CountryDatasetList για να υποδεχτώ τα νέα δεδομένα
        this.countryDatasetList.clear();
        
        //Δημιουργώ ένα instance του Country για για να το χρησιμοποιήσω μέσα στην μέθοδο.
        //Η τιμές που παίρνει το County αντικείμενο είναι αυτό που επιλέγει ο χρήστης από το dropdown
        //populateOil και Gdp. Κάνω κοινή χρήση του αντικειμένου επειδή κατά ο κατέβασμα των δεδομένων 
        //από την quandle αρχικοποιώ τα pojo όπου θέλω να έχουν την ίδια χώρα και τα 2. 
        //Μάλλον θα μπορούσε να γίνει καλύτερα, να ήταν δηλαδή Global η μεταβλητη.. προς το παρόν παίζει και το αφήνω έτσι.
        Country country = new Country();
        country.setName(cbCountries.getSelectedItem().toString());
        country.setIsoCode(this.countryCode);
        
        //Εδώ θα γεμίσω την μεταβλιτή oil την οποία ή θα την πάρω από την βάση ή θα την πάρω από την Quandle
        //ανάλογα με το αν τα δεδομένα είναι αποθηκευμένα στην βάση το ίδιο θα κάνω και για το Gdp
        setOilData();
        setGdpData();
        
        //Τώρα θα κάνω populate τους 2 πίνακες με τα δεδομένα oil και gdp. Πάντα ανάλογα με την πηγή. 
        if(this.oil!=null){
            populateOil(country);
            buttonController(true,false,true,true);
        }else{
            lblOil.setText("-");
            lblOilEndDate.setText("-");
            lblOilStartDate.setText("-"); 
            tblOil.setModel(new DefaultTableModel());
            
            buttonController(false,false,false,false);
        }
        
        if(this.gdp!=null){
            populateGdp(country);
            buttonController(true,false,true,true);
        }else{
            lblGdp.setText("-");
            lblGdpEndDate.setText("-");
            lblGdpStartDate.setText("-"); 
            tblGDP.setModel(new DefaultTableModel());
            
            if(this.oil==null)
                buttonController(false,false,false,false);
        }
        
        //Απλά ενημερώνω τον χρήστη 
        lblAction.setText("Fetching Completed!");
        //Εμφανίζω το popup στον χρήστη ότι τα δεδομένα φορτώσανε
        JOptionPane.showMessageDialog(jPanel1, "Τα δεδομένα φορτώσανε", "ΠΡΟΣΟΧΗ", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnApiCallActionPerformed

    /**
     * Η μέθοδος αυτή καλείται όταν ανοίγει το πρόγραμμα την πρώτη φορά
     * Θα διαβάσει το csv και θα το φορτώσει στο dropdown list
     * Η μέθοδος είναι εξοπλισμένη με 2 try ώστε να ελέγχει αν υπάρχει το αρχείο
     * η αν τα δεδομένα έχουν πρόβλημα μέσα στο αρχείο
     * 
     * @param evt Όταν ανοίγει η φόρμα
     */
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
            
            try {
                //Χρησιμοποιώ τον BufferReader για να διαβάσω το περιεχόμενο του αρχείου
                BufferedReader fileReader = null;
                //Απλά αρχικοποιώ μια μεταβλητή προκειμένου να διαβάσω την κάθε γραμή του αρχείου
                String line = "";            
                //Διαβάζω το αρχείου και το περνάω στο BufferedReader
                fileReader = new BufferedReader(new FileReader("src/view/iso-countries.csv"));
                //Αδιάζω τις χώρες από το dropdown
                cbCountries.removeAllItems();
                //Διαβάζω την πρώτη γραμμή
                fileReader.readLine();
                //Ενώσω η γραμμή δεν είναι άδεια
                while ((line = fileReader.readLine()) != null) {
                    //Παίρνω τα δεδομένα από την γραμμή και τα σπάω με ένα delimiter ;
                    String[] tokens = line.split(";");
                    // Το πρώτο delimiter είναι το όνομα της χώρας ενώ το δεύτερο είναι το iso code
                    hmCountries.put(tokens[0], tokens[2]);
                    //Αν δεν υπάρχει πρόβλημα με τα tokens θα τα καταχωρήσω στο dropdown
                    //τα tokens εννοώ τα 2 στοιχεία που παίρνω από το αρχείο. Κάθε ένα από αυτά που σπάω με το split
                    //Θεωρώ πως είναι token και για αυτό ονομάζω την μεταβλητή έτσι.
                    if (tokens.length > 0) {
                        //ε.. κάθε όνομα το βάζω στο combobox
                        cbCountries.addItem(tokens[0]);
                    }
                }    
                
                //Και κάνω μια προεπιλογή την Ελλάδα
                //cbCountries.setSelectedItem("GREECE");
                cbCountries.setSelectedItem("GEORGIA");
                
            } catch (IOException ex) {
                
                //Σε περίπτωση που σκάσει το πρόγραμμα επειδή είναι corrupted το αρχείο θα χρησιμοποιήσω τον 
                //Ή σε περίπτωση που δεν υπάρχει το αρχείο, μια απο τα ίδια...
                //logger για να καταγράψω το λάθος
                Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(jPanel1, "Λάθος μέσα στο αρχείο!", "Σφάλμα", JOptionPane.ERROR_MESSAGE);                
            }

    }//GEN-LAST:event_formWindowOpened

    /**
     * Αυτή η μέθοδος καλείται όταν αλλάζει το dropdownlistbox, προκειμένου να ενημερωθεί η εφαρμογή
     * για την αλλαγή και να θέση την χώρα σε μια άλλη
     * 
     * @param evt όταν αλλάζει το dropdown
     */
    private void cbCountriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCountriesActionPerformed
        //Όλο αυτό το πράμα είναι για να πάρω την επιλεγμένη χώρα από το hashtable
        //Εδώ να σημειώσω πως δεν βρήκα τρόπο να ενημερώνω το dropdwon με το key value pair. Έτσι
        //Αποφάσισα να φτιάξω μια μεταβλητή hashmap hmCounties όπου επιλέγω το hashmap βάση του κλειδιού που 
        //είναι το όνομα της χώρας, και απο εκεί παίρνω το iso code
        this.countryCode = hmCountries.get(cbCountries.getSelectedItem().toString()).toString();
        
        //Εδώ θέτω το iso code στο label απλά για ενημερωτικούς σκοπούς. Παρόλα αυτά η μεταβλητή this.countryCode θα
        //χρησιμοποιηθεί μετά σε περίπτωση που θέλουμε να καλέσουμε πάλι το API η να πάρουμε δεδομένα από την βάση
        lblselectedCountry.setText(this.countryCode);
    }//GEN-LAST:event_cbCountriesActionPerformed

    /**
     * Η μέθοδος καλείται όταν πατηθεί το κουμπί save
     * Θα καλέσει την SaveCountryDataset η οποία θα σώσει τα δεδομένα μέσα στην βάση μας.
     * 
     * @param evt όταν πατηθεί το κουμπί save
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //Ενημερώνω τον χρήστη ότι σώζει τα δεδομένα
        System.out.println("Saving data...");
        //Το ίδιο αλλά στο label
        lblAction.setText("Saving data..."); 
        //Σώζω τα δεδομένα κάνοντας κλήση της μεθόδου
        saveCountryDataset();
        buttonController(false,true,true,true);
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * Θα γίνει κλήση αυτής της μεθόδου όταν πατηθεί το κουμπί διαγραφή
     * Θα ρωτηθεί ο χρήστης αν είνα βέβαιος και μετά θα προχωρήσει στην διαγραφή όλων των δεδομένων για την επιλεγμένη
     * χώρα από την βάση δεδομένων.
     * 
     * @param evt όταν πατηθεί το κουμπί διαγραφή
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //Ερώτηση αν ο χρήστης είναι βέβαιος για την ενέργεια της διαγραφής
          int result = JOptionPane.showConfirmDialog(null, "Είστε βέβαιοι πως θέλετε να διαγράψετε τα δεδομένα από την βάση;", null, JOptionPane.YES_NO_OPTION);
          //Αν ναι τότε θα εκτελεστεί η διαγραφή
          if (result == JOptionPane.YES_OPTION) {
            //Ενημέρωση για την ενέργεια
            lblAction.setText("Deleting data...");
            //Διαγραφή των δεδομένων κάνοντας κλήση της κλάσης Databse
            Database.deleteAll();
            //Ενημέρωση για την ενέργεια της ολοκλήρωσης            
            lblAction.setText("Data deleted");
            //ξετσεκάρω το checkbox ότι τα δεδομένα δεν βρίσκονται πλέον στην βάση
            btnAlreadySaved.setSelected(false);
            JOptionPane.showMessageDialog(jPanel1, "Διαγράφτηκαν τα δεδομένα από την βάση με επιτυχία", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
          }else{
              //Αλλιώς ενημερώνω πως δεν υπάρχει κάτι να διαγραφεί από την βάση
              JOptionPane.showMessageDialog(jPanel1, "Δεν υπάρχουν δεδομένα στην βάση για την "+cbCountries.getSelectedItem(), "Ενημέρωση", JOptionPane.WARNING_MESSAGE);
              System.out.println("Nothing deleted");
          }
          
          buttonController(true,false,true,false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * Η μέθοδος καλείτει για να εμφανιστέι το γράφημα για την συγκεκριμένη χώρα
     * 
     * @param evt όταν πατηθεί το κουμπί plot 
     */
    private void btnPlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlotActionPerformed
        //Αρχικοποίηση του γραφήματος περνόντας τις παραμέτρους oil και gdp
        final Chart chart = new Chart("GDP and OIL consumtion for " + cbCountries.getSelectedItem(), this.oil, this.gdp );
        //Σύμφωνα με τον κατασκευαστή της κλάσης η chart.pack 
        //Προκαλεί το μέγεθος αυτού του παραθύρου να ταιριάζει με το προτιμώμενο μέγεθος και τις διατάξεις του
        //παραθύρου. Το προκύπτον πλάτος και ύψος του παραθύρου αυξάνεται αυτόματα        
        chart.pack();
        
        //Κεντράρει το παράθυρο του γραφήματος στο κέντρο της οθόνης
        RefineryUtilities.centerFrameOnScreen(chart);
        
        //Εμφανίζει το γράφημα
        chart.setVisible(true);
    }//GEN-LAST:event_btnPlotActionPerformed

    private void btnAlreadySavedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlreadySavedActionPerformed
        // TODO add your handling code here:
        if(btnAlreadySaved.isSelected()==true)
            btnAlreadySaved.setSelected(true);
        else
            btnAlreadySaved.setSelected(false);
    }//GEN-LAST:event_btnAlreadySavedActionPerformed

    /**
     * Υλοποίηση της μεθόδου για σώσιμο των δεδομένων στην βάση δεδομένων     
     */
    private void saveCountryDataset(){
        //Ενημερώνει τον χρήστη ότι πρόκειται να σώσει τα δεδομένα
        lblAction.setText("Attempting to save country dataset...");
        //Αρχικοποίηση της μεταβλητής αποτελέσματος.Πόσα δεδομένα διαγράφτηκαν από την βάση
        String result = "";
        
        //Έλεγχος αν τα δεδομένα υπάρχουν στην βάση
        long oilDataExists = Database.isCountryInDb(this.countryCode);
        
        //Αν δεν υπάρχουν το αποτέλεσμα είναι 0 και άρα πάει να τα σώσει
        if(oilDataExists==0){
            //Ενημερώνει τον χρήστη ότι ξεκινάει η διαδικασία αποθήκευσης
            lblAction.setText("Saving...");
            
            //Εισάγει τα δεδομένα χρησιμοποιόντας την μέθοδο insertCountryDataset της Database
            result = Database.insertCountryDataset(this.countryDatasetList);
            
            //Ενημερώνει τον χρήστη για το αποτέλεσμα της αποθήκευσης
            lblAction.setText("Saved "+ result + " records");
            System.out.println("Saved "+ result + " records");     
            JOptionPane.showMessageDialog(jPanel1, "Τα δεδομένα για την "+ cbCountries.getSelectedItem() + " σώθηκαν με επιτυχία!", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            
        }else{
            //Αλλιώς τα δεδομένα υπάρχουν στην βάση και ενημερώνει τον χρήστη για αυτό.
            JOptionPane.showMessageDialog(jPanel1, "Data already saved", "ΠΡΟΣΟΧΗ", JOptionPane.WARNING_MESSAGE);
            lblAction.setText("Data already saved");
            System.out.println("Data already saved");
        }        
        //Πάντως από την στιγμή που θα σώσει τα δεδομένα σίγουρα ήτε είναι είτε δεν είναι και τα βάζει το checkbox θα
        //τσεκαριστεί αφού και στις 2 περιπτώσεις τα δεδομένα θα σωθούν. Βέβαια δεν εξετάζουμε την περίπτωση
        //που η βάση δεδομένων δεν δουλεύει.
        btnAlreadySaved.setSelected(true);
    }

    
    /**
     * Αυτή η μέθοδος θα αρχικοποιήσει τις μεταβλητές της oil ήτε από την 
     * quandle ήτε από την βάση δεδομένων. Δεν κάνει κάτι άλλο παρά μόνο να αρχικοποιήσει τις μεταβλητές
     */
    private void setOilData(){
        //Δημιουργία αντικειμένου της Quandle
        Quandle quandle = new Quandle();
        //Έλεγχος αν τα δεδομένα υπάρχουν στην βάση (θα μπορούσα να έλεγχα το checkbox ¨η κάποια μεταβλητή 
        //αντί να ξανα καλώ την βάση, το αφήνω όμως έτσι)
        long oilDataExists = Database.isCountryInDb(this.countryCode);
        
        //Αν τα δεδομένα υπάρχουν δεν υπάρχουν σε περίπτωση που έχει τσεκαριστεί το checkbox
        //θα ξετσεκαριστεί
        if(oilDataExists==0){
            
            //Ξετσεκάρισμα του checkbox
            btnAlreadySaved.setSelected(false);
            //Κλήση του api
            this.oil = quandle.getOil(this.countryCode);
        }
        else{            
            //Τσεκάρισμα του checkbox αφού υπάρχουν τα δεδομένα στην βάση
            btnAlreadySaved.setSelected(true);
            //Μάζεμα τον δεδομένων από την βάση
            CountryDataset cd = Database.getOil(this.countryCode);
            
            if(cd!=null)
                this.oil = new Oil(cd);    
            else
                this.oil = null;
            //List<CountryData> cd = oil.getCountryData();            
            //Collections.sort(cd);
            //Collections.sort(cd,Collections.reverseOrder());
            
            
        }        
    }
    
    /**
     * Αυτή η μέθοδος θα κάνει populate τα δεδομένα στον πίνακα του Oil
     * 
     * @param country η χώρα που επιλέγει ο χρήστης
     */
    private void populateOil(Country country){                                
        
        //Χρησιμοποιώ ένα table model για να ενημερώσω τα δεδομένα το jtable
        DefaultTableModel model = new DefaultTableModel();
        //Θέτω τις επικεφαίδες έτος και τιμή, Year Value αντίστοιχα
        String header[] = new String[] { "Year", "value" };
        //Ε τις βάζω στον πίνακα..
        model.setColumnIdentifiers(header);

        //Θέτω το όνομα του λαδιού στο label
        lblOil.setText(this.oil.getName());                
        
        //Δημιουργώ ένα CountryDataset. Ο λόγος που ξεκινάω αυτή την διαδικασία είναι επειδή πρέπει να αποθηκευσω προσορινά τις
        //τιμές που πήρα σε περίπτωση που χρειάζεται να τις σώσω στην βάση
        CountryDataset countryDataset = new CountryDataset();        
        countryDataset.setName(this.oil.getName());
        countryDataset.setDescription(this.oil.getDescription());        
        
        //Κάνω format το έτος 
        String pattern = "yyyy";
        //Αρχικοποιώ την SimpleDateFormat για να μορφώποιήσω την ημερομηνία στην μωρφή που την θέλουμε δηλαδήγ yyyy
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);  
        //Χρησιμοποιώ την simpleDateFormat για να κάνω την μορφωποίηση και να σώσω το αποτέλεσμα σε 2 μεταβλητές
        String getStart_date = simpleDateFormat.format(this.oil.getStart_date());
        String getEnd_date = simpleDateFormat.format(this.oil.getEnd_date());
        //Θέτω τις τιμές στο countryDataset
        countryDataset.setStartYear(getStart_date);
        countryDataset.setEndYear(getEnd_date);        
        
        //Θέτω τα label start date και end date στα label πάνω στην φόρμα
        lblOilStartDate.setText(getStart_date);
        lblOilEndDate.setText(getEnd_date);
        
        //Θέτω τον κωδικό της χώρας
        countryDataset.setCountryCode(country);
        
        
        //Ξεκινάω να σώσω τώρα τα CountryData Σε μια μεταβλητή ArrayList αλλά
        //και να κάνω populate τον πίνακα
        List<CountryData> list = new ArrayList<CountryData>();   
        //Ε για κάθε δεδομένο του country data του oil
        for(CountryData oildata: this.oil.getCountryData()){
           //Κάνω format την τιμή σε 2 δεκαδικά χρησιμοποιόντας τα regional settings του συστήματος
           String oilDataValue = Helper.formatDecimal(oildata.getValue());
           //String oilDataValue = oildata.getValue();
           
           //Δημιουρώ ένα αντικέιμενο coyntryData για να σώσω τα δεδομένα
           CountryData cd = new CountryData();                           
           //Θέτω τις τιμές
           cd.setDataYear(oildata.getDataYear());           
           cd.setValue(oilDataValue);
           //Θέτω το countryDataset για το countryData
           cd.setDataset(countryDataset);
           
           //Βάζω στο modal την γραμμή του έτους και της τιμής. Εκεί θα αποθηκευτεί και θα χρησιμοποιηθεί από τον πίνακα
           model.addRow(new Object[]{oildata.getDataYear(), oilDataValue});
           //Θέτω το modal στον πίνακα
           tblOil.setModel(model);                
           //Αποθηκευω τα δεδεομένα countryData στην λίστα
           list.add(cd);                        
        }
        //Θέτω στο countryDataset την λίστα με τα countryData
        countryDataset.setCountryDataList(list);             
        //Αποθηκεύω και τα countryDataset
        this.countryDatasetList.add(countryDataset);
    
    }
    
    //Θέτω την μεταβλητή για το gdp.
    private void setGdpData(){        
        //Αρχικοποιώ την κλάση της Quandle
        Quandle quandle = new Quandle();
        //Ελέγχω αν έχω δεδομένα για την χώρα
        long gdpDataExists = Database.isCountryInDb(this.countryCode);        
        //Αν τα δεδομένα δεν υπάρχουν στην βαση
        if(gdpDataExists==0){
            //Θα τα κατεβάσω από την Quandle
            this.gdp = quandle.getGdp(this.countryCode);
            //τσεκάρω το checkbox ως μη επιλεγμένο
            btnAlreadySaved.setSelected(false);
        }
        else{
            //Τα δεδομένα είναι στην βάση και τσέκάρω το tsekbox
            btnAlreadySaved.setSelected(true);
            //Τραβάω τα δεδομένα από την βάση
            Gdp gdp = new Gdp(Database.getGdp(this.countryCode));
            //Τα θέτω στην μεταβλητή
            this.gdp = gdp;
        }                
    }
    
    /**
     * Αρχικοποιεί τον πίνακα για το GDP
     * 
     * @param country η χώρα που επιλέγει ο χρήστης από την φόρμα
     */
    private void populateGdp(Country country){                
        //Δημιουργώ το Model για τον πίνακα και αρχικοποιω τις κεφαλίδες του        
        DefaultTableModel model = new DefaultTableModel();        
        String header[] = new String[] { "Year", "value" };
        model.setColumnIdentifiers(header);
        
        //Αρχικοποιώ το label όνομα
        lblGdp.setText(this.gdp.getName());

        //Θέτω τις ημερομηνίες με το σωστή μορφοποίηση
        String pattern = "yyyy";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);          
        String getStart_date = simpleDateFormat.format(this.gdp.getStart_date());
        String getEnd_date = simpleDateFormat.format(this.gdp.getEnd_date());
        
        //Θέτω τα label για την αρχική και τελική ημερομηνία
        lblGdpStartDate.setText(getStart_date);
        lblGdpEndDate.setText(getEnd_date);                
        
        //Αρχικοποιώ τις μεταβλητές για το CountryDataset που θα καταχωρήσω στην βάση
        CountryDataset countryDataset = new CountryDataset();
        countryDataset.setName(this.gdp.getName());
        countryDataset.setDescription(this.gdp.getDescription());
        countryDataset.setStartYear(getStart_date);
        countryDataset.setEndYear(getEnd_date);                                        
        countryDataset.setCountryCode(country);
         
        //Δημιουργώ την λίστα με τα CountryData
        List<CountryData> list = new ArrayList<CountryData>();
        
        //Αποθηκεύω το κάθε coyntryData στην λίστα
        for(CountryData gdpdata: this.gdp.getCountryData()){
            CountryData cd = new CountryData();
     
            cd.setDataYear(gdpdata.getDataYear());
            cd.setValue(gdpdata.getValue());
            cd.setDataset(countryDataset);
            list.add(cd);
            
            //Η Αποθήκευση
            model.addRow(new Object[]{gdpdata.getDataYear(), gdpdata.getValue()});
            
            //Θέτω στον πίνακα το μοντέλο
            tblGDP.setModel(model);                  
                        
        }
        //Αποθήκευση των data στο coyntryDataset
        countryDataset.setCountryDataList(list);
        //Αποθήκευση του CountryDataset στην λίστα τελικά
        this.countryDatasetList.add(countryDataset);                                
    }
    
    
    /**
     * 
     * Χρησιμοποιήται σε σημεία του κώδικα προκειμένου να ενεργοποιεί ή να απενεργοποιει
     * τα κουμπιά save,delete,plot και already saved
     * 
     * @param btnsave για το αν θα είναι ενεργό το κουμπί save
     * @param btndelete  για το αν θα είναι ενεργό το κουμπί delete
     * @param btnplot  για το αν θα είναι ενεργό το κουμπί plot
     * @param btnalreadysaved  για το αν θα είναι ενεργό το checkbox alreadysaved
     */
    private void buttonController(Boolean btnsave, Boolean btndelete, Boolean btnplot, Boolean btnalreadysaved){
        
        //Απλή αρχικοποίηση μεταβλητών.
        Boolean enableSave = btnsave;
        Boolean enableDelete = btndelete;
        Boolean enablePlot = btnplot;
        Boolean enableAlreadySaved = false;
        
        //Διαβάζω την βάση για το αν υπάρχουν δεδομένα στην βάση για την συγκεκριμένη χώρα
        long num = Database.isCountryInDb(this.countryCode);
        
        //Αν του έχω πει να εneργοποιηθεί
        if(btnsave==true){            
            //Αλλά υπάρχουν δεδομένα στην βάση τότε να μην ενεργοποιείται το save
            enableSave = (num>0)? false:true;
        }else{
            
        }
        
        //Αν του έχω πει να απενεργοποιηθεί το delete
        if(btndelete==false){            
            //Αλλά υπάρχουν δεδομένα στην βάση να μην απενεργοποιηθεί
            enableDelete = (num>0)? true:false;
        }
        
        //Αν του έχω πει να απενεργοποιηθεί
        if(btnplot==false){            
            //Αλλά υπάρχουν δεδομένα στην βάση να μην απενεργοποηθεί.. 
            //Το plot ποτέ δεν απενεργοποιείτε εκτός από την αρχικοποίηση της εφαρμογής
            enablePlot = (num>0)? true:false;
        }
                
        
        //Ρύθμιση των πεδίων αν είναι enable ή disable
        btnSave.setEnabled(enableSave);
        btnDelete.setEnabled(enableDelete);
        btnPlot.setEnabled(enablePlot);
        btnAlreadySaved.setEnabled(enableAlreadySaved);
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainpage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox btnAlreadySaved;
    private javax.swing.JButton btnApiCall;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPlot;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbCountries;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAction;
    private javax.swing.JLabel lblGdp;
    private javax.swing.JLabel lblGdpEndDate;
    private javax.swing.JLabel lblGdpStartDate;
    private javax.swing.JLabel lblOil;
    private javax.swing.JLabel lblOilEndDate;
    private javax.swing.JLabel lblOilStartDate;
    private javax.swing.JLabel lblselectedCountry;
    private javax.swing.JTable tblGDP;
    private javax.swing.JTable tblOil;
    // End of variables declaration//GEN-END:variables
}
